## Annoyingly, all paths except outputs must be absolute.
input {
    file {
        path => "/Users/ik/Code/legion-logstash-configs/test_files/sgelogs/reporting"
        #path => "/cm/shared/apps/sge/current/default/common/reporting"
        start_position => "beginning"
        add_field => {
            "type" => "sge_reporting_log"
        }
    }

    file {
        path => "/Users/ik/Code/legion-logstash-configs/test_files/sgelogs/schedule"
        #path => "/cm/shared/apps/sge/current/default/common/schedule"
        start_position => "beginning"
        add_field => {
            "type" => "sge_schedule_log"
        }
    }

    stdin { }
}
filter {
    if [type] == "sge_reporting_log" {
        grok {
            patterns_dir => "/Users/ik/Code/legion-logstash-configs/sge/patterns"
            #patterns_dir => "/home/uccaiki/Code/legion-logstash-configs/sge/patterns"
            match => { "message" => 
              [
                "%{REPORTING_ACCOUNTING_LINE}",
                "%{REPORTING_NEW_JOB_LINE}",
                "%{REPORTING_JOB_LOG_LINE}",
                "%{REPORTING_QUEUE_LINE}",
                "%{REPORTING_QUEUE_CONSUMABLE_LINE}"
              ]
            } 
            add_field => [ "read_time", "%{@timestamp}" ]
        }

        # These *might* need proper conditionals depending on which event types they're actually set in
        # Or not -- looks like it's fine to try to filter fields that aren't set
        date {
            match => [ "raw_event_time", "UNIX" ]
            target => "event_time"
        }
        date {
            match => [ "raw_advance_reservation_submission_time", "UNIX" ] 
            target => "advance_reservation_submission_time"
        }
        date {
            match => [ "raw_end_time", "UNIX" ] 
            target => "end_time"
        }
        date {
            match => [ "raw_event_time", "UNIX" ] 
            target => "event_time"
        }
        date {
            match => [ "raw_start_time", "UNIX" ] 
            target => "start_time"
        }
        date {
            match => [ "raw_submission_time", "UNIX" ] 
            target => "submission_time"
        }

        # You should probably convert the raws to integers or delete them after this.


        # Not sure whether to do this: delete all the advance reservation data if no advance reservation was used.
        if [advance_reservation_id] == "0" {
            # Delete all the advance_reservation_fields.
        }

    }

    if [type] == "sge_schedule_log" {
        grok {
            patterns_dir => "/Users/ik/Code/legion-logstash-configs/sge/patterns"
            #patterns_dir => "/home/uccaiki/Code/legion-logstash-configs/sge/patterns"
            match => { "message" => 
                [
                    "%{SCHEDULE_LINE}"
                ]
            }
            add_field => [ "read_time", "%{@timestamp}" ]
        }

    }


    # Replaces the timestamp with the time from the reporting file.
    date {
        match => [ "raw_reporting_time", "UNIX" ]
        target => "@timestamp"
    }

    # Going to move these type conversions into the patterns
    # Some of the PE values can be "NONE". We should mutate these before inserting them, maybe to INT_MIN, 0, 1, or something else
#    mutate {
#        convert => [ [ "advance_reservation_id", "execution_status", "exit_status", "job_number", "pe_task_id", "priority", "raw_advance_submission_time", "raw_end_time", "raw_start_time", "raw_submission_time", "read_time", "ru_wallclock", "slots", "task_id" ], "integer" ]
#    }
}

output {
    if "_grokparsefailure" not in [tags] {
        elasticsearch {
            host => "128.40.161.101"
            protocol => "http"
            codec => "json"
        }
        file {
            path => "outputs/%{type}-success"
            codec => "json"
        }
    } else {
        file {
            path => "outputs/%{type}-failure"
            message_format => "%{message}"
            codec => "plain"
        }
    }
}


