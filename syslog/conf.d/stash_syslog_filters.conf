filter {
    grok {
        patterns_dir => "/Users/ik/Code/legion-logstash-configs/syslog/patterns"
        match => { "message" => 
            [
                "%{IPATH_PREFIX}",
                "%{IPATH_QUIESCENCE}",
                "%{IPATH_SOCKET_CLOSE}",
                "%{IPATH_UNEXPECTED_QUIT}",
                "%{IPATH_DRIVER_INIT_FAIL}",
                "%{IPATH_OOC_EAGER_MSG_LID}",
                "%{IPATH_OOC_EAGER_MSG_HOST}"
            ]
        }
        add_tag => [ "ipath", "matched" ]
        remove_tag => [ "_grokparsefailure" ]
    }

    grok {
        patterns_dir => "/Users/ik/Code/legion-logstash-configs/syslog/patterns"
        match => { "message" =>
            [
                "%{LUSTRE_SYSLOG_NO_CONNECT}",
                "%{LUSTRE_SYSLOG_CLIENT_EVICT}",
                "%{LUSTRE_SYSLOG_FAIL}",
                "%{LUSTRE_SYSLOG_IO_ERROR}",
                "%{LUSTRE_SYSLOG_MISC}",
                "%{LUSTRE_SYSLOG_COMMS_ERROR}",
                "%{LUSTRE_SYSLOG_CLIENT_MESSAGE}",
                "%{LUSTRE_SYSLOG_RECONNECT_REFUSED}",
                "%{LUSTRE_SYSLOG_CONNECTION_RESTORED}"
            ]
        }
        add_tag => [ "lustre", "matched" ]
        remove_tag => [ "_grokparsefailure" ]
    }

    grok {
        patterns_dir => "/Users/ik/Code/legion-logstash-configs/syslog/patterns"
        match => { "message" =>
            [
                "%{SYSLOG_SGE_JOB_START_FINISH}"
            ]
        }
        add_tag => [ "sge", "matched" ]
        remove_tag => [ "_grokparsefailure" ]
    }

    grok {
        patterns_dir => "/Users/ik/Code/legion-logstash-configs/syslog/patterns"
        match => { "message" =>
            [
                "%{SYSLOG_IMA_FILE_ERR}"
            ]
        }
        add_tag => [ "ima_file_err", "matched" ]
        remove_tag => [ "_grokparsefailure" ]
    }

    grok {
        patterns_dir => "/Users/ik/Code/legion-logstash-configs/syslog/patterns"
        match => { "message" =>
            [
                "%{SYSLOG_CROND}",
                "%{SYSLOG_ACRON}",
                "%{SYSLOG_SSHD}",
                "%{SYSLOG_GMOND_ERROR}",
                "%{SYSLOG_NO_GPU}",
                "%{SYSLOG_OPENSM_PORT_DOWN}"
            ]
        }
        add_tag => [ "droppable" ]
        remove_tag => [ "_grokparsefailure" ]
    }
    if "droppable" in [tags] {
        drop { }
    }



    # Does reverse DNS lookup on a field
    if [blame_ip] != "" {
        ruby {
            init => "require 'resolv'"
            code => "if event['blame_ip'] then event['blame_host'] = Resolv.getname(event['blame_ip']) end"
            # $ ruby -e 'require "resolv"' -e 'print Resolv.getname("127.0.0.1")'
            # >>> code => "print(event.methods - Object.methods)"
            # [:[], :[]=, :append, :cancel, :cancelled?, :fields, :overwrite, :remove, :ruby_timestamp, :sprintf, :tag, :timestamp, :timestamp=, :to_hash, :uncancel, :unix_timestamp]{"message":"g","@version":"1","@timestamp":"2014-11-21T14:17:43.002Z","type":"127.0.0.1","bees":"127.0.0.1","host":"corvus.rits-isd.ucl.ac.uk"}
        }
    }
}



